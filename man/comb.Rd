% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/comb.R
\name{comb}
\alias{comb}
\alias{comb_adj}
\alias{comb_all}
\alias{comb_flank}
\alias{comb_nearest}
\alias{comb_nearest_k}
\alias{comb_sliding}
\alias{comb_wind}
\title{Combinations of loci.}
\usage{
comb_wind(pos, min_dist, max_dist)

comb_adj(pos)

comb_all(pos)

comb_nearest(indices, indices2, pos, pos2)

comb_nearest_k(indices, indices2, pos, pos2, k)

comb_flank(indices, indices2, pos, pos2)

comb_sliding(pos, start, width, advance)
}
\arguments{
\item{pos}{An increasingly sorted numeric vector. The positions of the loci.}

\item{min_dist}{A double. The minimum distance between loci.}

\item{max_dist}{A double. The maximum distance between loci.}

\item{indices}{An integer vector. A vector with the indices of the loci.}

\item{indices2}{An integer vector. A vector with the indices of a second set
of loci.}

\item{pos2}{An increasingly numeric vector. The positions of a second set of loci.}

\item{k}{An integer. The number of nearest loci to be considered.}

\item{start}{A double. Specifies where to start with the sliding window.}

\item{width}{A double. Width of the sliding window.}

\item{advance}{A double. Increment of the sliding window.}
}
\value{
A numeric matrix.
}
\description{
Create a matrix of combinations between loci for which linkage
disequilibrium (LD) should be computed.

Combinations among loci with minimum and maximum distance.

Combinations among adjacent (neighboring) loci.

Combinations among all loci.

Combinations among nearest loci.

Combinations among nearest loci.

Combinations between flaning loci.

Combinations among loci in a sliding window.
}
\details{
The purpose of these functions is to provide a convenient way to obtain all
desired combinations of loci for computation of LD between them. Here is an
overview of their functionality:

\itemize{
  \item comb_all: Combinations of all loci.
  \item comb_adj: Combinations of adjacent (neighboring) loci.
  \item comb_nearest: Combinations of a set of loci and its closest pendant
  in another set.
  \item comb_nearest_k: Combinations of a set of loci and its closest
  k pendant in another set.
  \item comb_flank: Combinations between flanking loci.
  \item comb_wind: Combinations of loci with a given minimum and maximum distance.
  \item comb_sliding: Combinations of loci within an advancing sliding window.
}

In general, these functions all return a matrix with three columns.
The first two columns refer to the indices of the pair of loci, while the
third column indicates to which group of combinations the pair belongs.
Currently, the assigned groups only vary for \code{\link{comb_sliding}},
where the group indicates to which window the pair of loci belongs.

The returned matrix is suitable as input for the function
\code{\link{LD_mult}} for efficient computation of LD.
}
\examples{
pos <- sort(runif(10))
comb_wind(pos, min_dist = c(0.1, 0.3, 0.8), max_dist = c(0.2, 0.7, 0.9))
comb_adj(pos)
comb_all(pos)
 pos2 <- sort(runif(10L, min = 0, max = max(pos)))
indices1 <- which(sort(c(pos, pos2)) \%in\% pos)
indices2 <- which(sort(c(pos, pos2)) \%in\% pos2)
comb_nearest(indices1, indices2, pos, pos2)
comb_nearest_k(indices1, indices2, pos, pos2, 3)
comb_flank(indices1, indices2, pos, pos2)
comb_sliding(pos, 0, 0.2, 0.1)
}
\author{
Dominik Mueller (\email{dominikmueller64@yahoo.de})
}
\seealso{
\code{\link{LD_mult}}
}

