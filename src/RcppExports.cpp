// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// comb_wind
arma::mat comb_wind(const arma::vec& pos, const double min_dist, const double max_dist);
RcppExport SEXP LDtools_comb_wind(SEXP posSEXP, SEXP min_distSEXP, SEXP max_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< const double >::type min_dist(min_distSEXP);
    Rcpp::traits::input_parameter< const double >::type max_dist(max_distSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_wind(pos, min_dist, max_dist));
    return rcpp_result_gen;
END_RCPP
}
// comb_wind_sets
arma::mat comb_wind_sets(const arma::ivec& indices_a, const arma::ivec& indices_b, const arma::vec& pos_a, const arma::vec& pos_b, const double min_dist, const double max_dist);
RcppExport SEXP LDtools_comb_wind_sets(SEXP indices_aSEXP, SEXP indices_bSEXP, SEXP pos_aSEXP, SEXP pos_bSEXP, SEXP min_distSEXP, SEXP max_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_a(indices_aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_b(indices_bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_a(pos_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_b(pos_bSEXP);
    Rcpp::traits::input_parameter< const double >::type min_dist(min_distSEXP);
    Rcpp::traits::input_parameter< const double >::type max_dist(max_distSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_wind_sets(indices_a, indices_b, pos_a, pos_b, min_dist, max_dist));
    return rcpp_result_gen;
END_RCPP
}
// comb_adj
arma::mat comb_adj(const arma::vec& pos);
RcppExport SEXP LDtools_comb_adj(SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_adj(pos));
    return rcpp_result_gen;
END_RCPP
}
// comb_all
arma::mat comb_all(const arma::vec& pos);
RcppExport SEXP LDtools_comb_all(SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_all(pos));
    return rcpp_result_gen;
END_RCPP
}
// comb_all_sets
arma::mat comb_all_sets(const arma::ivec& indices_a, const arma::ivec& indices_b, const arma::vec& pos_a, const arma::vec& pos_b);
RcppExport SEXP LDtools_comb_all_sets(SEXP indices_aSEXP, SEXP indices_bSEXP, SEXP pos_aSEXP, SEXP pos_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_a(indices_aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_b(indices_bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_a(pos_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_b(pos_bSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_all_sets(indices_a, indices_b, pos_a, pos_b));
    return rcpp_result_gen;
END_RCPP
}
// comb_flank_sets
arma::mat comb_flank_sets(const arma::ivec& indices_a, const arma::ivec& indices_b, const arma::vec& pos_a, const arma::vec& pos_b);
RcppExport SEXP LDtools_comb_flank_sets(SEXP indices_aSEXP, SEXP indices_bSEXP, SEXP pos_aSEXP, SEXP pos_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_a(indices_aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_b(indices_bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_a(pos_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_b(pos_bSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_flank_sets(indices_a, indices_b, pos_a, pos_b));
    return rcpp_result_gen;
END_RCPP
}
// comb_nearest_k_sets
arma::mat comb_nearest_k_sets(const arma::ivec& indices_a, const arma::ivec& indices_b, const arma::vec& pos_a, const arma::vec& pos_b, const int k);
RcppExport SEXP LDtools_comb_nearest_k_sets(SEXP indices_aSEXP, SEXP indices_bSEXP, SEXP pos_aSEXP, SEXP pos_bSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_a(indices_aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_b(indices_bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_a(pos_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_b(pos_bSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_nearest_k_sets(indices_a, indices_b, pos_a, pos_b, k));
    return rcpp_result_gen;
END_RCPP
}
// comb_sliding
arma::mat comb_sliding(const arma::vec& pos, const double start, const double width, const double advance);
RcppExport SEXP LDtools_comb_sliding(SEXP posSEXP, SEXP startSEXP, SEXP widthSEXP, SEXP advanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< const double >::type start(startSEXP);
    Rcpp::traits::input_parameter< const double >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const double >::type advance(advanceSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_sliding(pos, start, width, advance));
    return rcpp_result_gen;
END_RCPP
}
// comb_sliding_sets
arma::mat comb_sliding_sets(const arma::ivec& indices_a, const arma::ivec& indices_b, const arma::vec& pos_a, const arma::vec& pos_b, const double start, const double width, const double advance);
RcppExport SEXP LDtools_comb_sliding_sets(SEXP indices_aSEXP, SEXP indices_bSEXP, SEXP pos_aSEXP, SEXP pos_bSEXP, SEXP startSEXP, SEXP widthSEXP, SEXP advanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_a(indices_aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type indices_b(indices_bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_a(pos_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pos_b(pos_bSEXP);
    Rcpp::traits::input_parameter< const double >::type start(startSEXP);
    Rcpp::traits::input_parameter< const double >::type width(widthSEXP);
    Rcpp::traits::input_parameter< const double >::type advance(advanceSEXP);
    rcpp_result_gen = Rcpp::wrap(comb_sliding_sets(indices_a, indices_b, pos_a, pos_b, start, width, advance));
    return rcpp_result_gen;
END_RCPP
}
// index_geq
R_xlen_t index_geq(const arma::vec& x, const double y);
RcppExport SEXP LDtools_index_geq(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(index_geq(x, y));
    return rcpp_result_gen;
END_RCPP
}
// index_greater
R_xlen_t index_greater(const arma::vec& x, const double y);
RcppExport SEXP LDtools_index_greater(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(index_greater(x, y));
    return rcpp_result_gen;
END_RCPP
}
// find_closest
R_xlen_t find_closest(const arma::vec& x, const double y);
RcppExport SEXP LDtools_find_closest(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(find_closest(x, y));
    return rcpp_result_gen;
END_RCPP
}
// center_matrix
void center_matrix(arma::mat& X, const arma::vec& center);
RcppExport SEXP LDtools_center_matrix(SEXP XSEXP, SEXP centerSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type center(centerSEXP);
    center_matrix(X, center);
    return R_NilValue;
END_RCPP
}
// LD
Rcpp::List LD(const arma::vec& x, const arma::vec& y, const double px, const double py, const bool any_na, const bool is_phased, const bool r_only);
RcppExport SEXP LDtools_LD(SEXP xSEXP, SEXP ySEXP, SEXP pxSEXP, SEXP pySEXP, SEXP any_naSEXP, SEXP is_phasedSEXP, SEXP r_onlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type px(pxSEXP);
    Rcpp::traits::input_parameter< const double >::type py(pySEXP);
    Rcpp::traits::input_parameter< const bool >::type any_na(any_naSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_phased(is_phasedSEXP);
    Rcpp::traits::input_parameter< const bool >::type r_only(r_onlySEXP);
    rcpp_result_gen = Rcpp::wrap(LD(x, y, px, py, any_na, is_phased, r_only));
    return rcpp_result_gen;
END_RCPP
}
// LD_mult
Rcpp::DataFrame LD_mult(arma::mat& X, const arma::vec& p, const arma::mat& matr, const bool is_phased, const bool any_na);
RcppExport SEXP LDtools_LD_mult(SEXP XSEXP, SEXP pSEXP, SEXP matrSEXP, SEXP is_phasedSEXP, SEXP any_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type matr(matrSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_phased(is_phasedSEXP);
    Rcpp::traits::input_parameter< const bool >::type any_na(any_naSEXP);
    rcpp_result_gen = Rcpp::wrap(LD_mult(X, p, matr, is_phased, any_na));
    return rcpp_result_gen;
END_RCPP
}
// LD_mult_r_dev
Rcpp::DataFrame LD_mult_r_dev(arma::mat& X, const arma::vec& p, const arma::mat& matr, const bool is_phased, const bool any_na, const bool cache);
RcppExport SEXP LDtools_LD_mult_r_dev(SEXP XSEXP, SEXP pSEXP, SEXP matrSEXP, SEXP is_phasedSEXP, SEXP any_naSEXP, SEXP cacheSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type matr(matrSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_phased(is_phasedSEXP);
    Rcpp::traits::input_parameter< const bool >::type any_na(any_naSEXP);
    Rcpp::traits::input_parameter< const bool >::type cache(cacheSEXP);
    rcpp_result_gen = Rcpp::wrap(LD_mult_r_dev(X, p, matr, is_phased, any_na, cache));
    return rcpp_result_gen;
END_RCPP
}
// LD_mult_r
Rcpp::DataFrame LD_mult_r(arma::mat& X, const arma::vec& p, const arma::mat& matr, const bool is_phased, const bool any_na);
RcppExport SEXP LDtools_LD_mult_r(SEXP XSEXP, SEXP pSEXP, SEXP matrSEXP, SEXP is_phasedSEXP, SEXP any_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type matr(matrSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_phased(is_phasedSEXP);
    Rcpp::traits::input_parameter< const bool >::type any_na(any_naSEXP);
    rcpp_result_gen = Rcpp::wrap(LD_mult_r(X, p, matr, is_phased, any_na));
    return rcpp_result_gen;
END_RCPP
}
// get_counts
arma::imat get_counts(const arma::vec& x, const arma::vec& y);
RcppExport SEXP LDtools_get_counts(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(get_counts(x, y));
    return rcpp_result_gen;
END_RCPP
}
// optimum_pxy
double optimum_pxy(const arma::imat& n3x3, const double px, const double py, const double lower, const double upper);
RcppExport SEXP LDtools_optimum_pxy(SEXP n3x3SEXP, SEXP pxSEXP, SEXP pySEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type n3x3(n3x3SEXP);
    Rcpp::traits::input_parameter< const double >::type px(pxSEXP);
    Rcpp::traits::input_parameter< const double >::type py(pySEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(optimum_pxy(n3x3, px, py, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// sliding_window
Rcpp::DataFrame sliding_window(arma::vec& x, arma::vec& pos, double start, double width, double advance, std::string stat);
RcppExport SEXP LDtools_sliding_window(SEXP xSEXP, SEXP posSEXP, SEXP startSEXP, SEXP widthSEXP, SEXP advanceSEXP, SEXP statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type width(widthSEXP);
    Rcpp::traits::input_parameter< double >::type advance(advanceSEXP);
    Rcpp::traits::input_parameter< std::string >::type stat(statSEXP);
    rcpp_result_gen = Rcpp::wrap(sliding_window(x, pos, start, width, advance, stat));
    return rcpp_result_gen;
END_RCPP
}
